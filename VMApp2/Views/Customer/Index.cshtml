@model IEnumerable<VMApp2.Models.Customer>
@*
    3 +      Note: I've set the model for this view to IEnumerable<Customer>.
    4 +      This is a simple interface implemented by the list class. Since
    5 +      in this view we only want to iterate over this list, and we don't
    6 +      need any of the operations in the List class (eg Add, Remove, etc),
    7 +      it's better to use the IEnumerable interface, which allows use to
    8 +      iterate over the list. If in the future, we replace the List with a
    9 +      different data structure, as long as it is enumerable, our view code
    10 +      will remain unchanged.
    11 +  *@


@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Customers</h2>
<table id="customers" class="table compact cell-border table-bordered table-hover">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Membership Type</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

@section scripts
{
    <script>
        $(document).ready(function () {
            
           var table = $("#customers").DataTable({
                ajax: {
                    url: "/api/customers",
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "name",
                        render: function (data, type, row) {
                            return "<a href='/customer/edit/" + row.id + "'>" + row.name + "</a>";
                        }
                    },
                    {
                        data: "membershipType.name"
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-customer-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });
            //second argument of .on() funtion is a filter - js.delete - so that you dont use a lot
            //of memory by doing a handler on each row, rather once on the table
           $("#customers").on("click", ".js-delete", function () {

                var button = $(this);
                bootbox.confirm("Are you sure you want to delete this customer?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/customers/" + button.attr("data-customer-id"),
                            method: "DELETE",
                            success: function () {
                                table.row(button.parents("tr")).remove().draw();
                            }
                        });
                    }
                });
            });
        });
    </script>    
}